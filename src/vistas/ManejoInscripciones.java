/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import accesoADatos.AlumnoData;
import accesoADatos.InscripcionData;
import accesoADatos.MateriaData;
import entidades.Alumno;
import entidades.Inscripcion;
import entidades.Materia;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.time.LocalDate;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chari
 */
public class ManejoInscripciones extends javax.swing.JInternalFrame {

    
    private DefaultTableModel modelo = new  DefaultTableModel() ;
    /**
     * Creates new form ManejoInscripciones
     */
        Alumno alumno = new Alumno();
    public ManejoInscripciones() {
        initComponents();
        armarCabecera();
        armarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jrMateria = new javax.swing.JRadioButton();
        jrMateriaN = new javax.swing.JRadioButton();
        jbInscripcion = new javax.swing.JButton();
        jbAnular = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jcSelecAl = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtInscripcion = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(51, 51, 51))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Formulario de Inscripcion");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Seleccone un alumno");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel3.setText("Listado de Materias");

        jrMateria.setText("Materias inscriptas");
        jrMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrMateriaActionPerformed(evt);
            }
        });

        jrMateriaN.setText("Materias no inscriptas");
        jrMateriaN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrMateriaNActionPerformed(evt);
            }
        });

        jbInscripcion.setText("Inscribir");
        jbInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscripcionActionPerformed(evt);
            }
        });

        jbAnular.setText("Anular Inscripcion");
        jbAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAnularActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jcSelecAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcSelecAlActionPerformed(evt);
            }
        });

        jtInscripcion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtInscripcion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jrMateria)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jrMateriaN)
                                .addGap(25, 25, 25))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcSelecAl, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jbInscripcion)
                        .addGap(59, 59, 59)
                        .addComponent(jbAnular)
                        .addGap(69, 69, 69)
                        .addComponent(jbSalir)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcSelecAl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrMateria)
                    .addComponent(jrMateriaN))
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInscripcion)
                    .addComponent(jbAnular)
                    .addComponent(jbSalir))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrMateriaNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrMateriaNActionPerformed
        jrMateria.setSelected(false);
        cargarDatos((Alumno)jcSelecAl.getSelectedItem());
    }//GEN-LAST:event_jrMateriaNActionPerformed

    private void jrMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrMateriaActionPerformed
        jrMateriaN.setSelected(false);
        cargarDatos((Alumno)jcSelecAl.getSelectedItem());
    }//GEN-LAST:event_jrMateriaActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
     this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscripcionActionPerformed
        InscripcionData inscriD = new InscripcionData();
        Alumno alu = (Alumno) jcSelecAl.getSelectedItem();
        MateriaData materiaD = new MateriaData();
        int fila = jtInscripcion.getSelectedRow();
        int id = (int) jtInscripcion.getValueAt(fila, 0);
        Materia mat = materiaD.buscarMateria(id);
        Inscripcion ins = new Inscripcion();
        ins.setAlumno(alu);
        ins.setMateria(mat);
        inscriD.guardarInscripcion(ins);
        cargarDatos(alumno);
    }//GEN-LAST:event_jbInscripcionActionPerformed

    private void jbAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAnularActionPerformed
        InscripcionData inscriD = new InscripcionData();
        Alumno alu = (Alumno) jcSelecAl.getSelectedItem();
        MateriaData materiaD = new MateriaData();
        int fila = jtInscripcion.getSelectedRow();
        int idMateria = (int) jtInscripcion.getValueAt(fila, 0);
        
        inscriD.borrarInscripcionMateriaAlumno(alu.getIdAlumno(), idMateria);
        cargarDatos(alumno);
    }//GEN-LAST:event_jbAnularActionPerformed

    private void jcSelecAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcSelecAlActionPerformed
        jrMateria.setSelected(false);
        jrMateriaN.setSelected(false);
         cargarDatos(alumno);
         
    }//GEN-LAST:event_jcSelecAlActionPerformed

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAnular;
    private javax.swing.JButton jbInscripcion;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcSelecAl;
    private javax.swing.JRadioButton jrMateria;
    private javax.swing.JRadioButton jrMateriaN;
    private javax.swing.JTable jtInscripcion;
    // End of variables declaration//GEN-END:variables
    AlumnoData aData = new AlumnoData();
    
    private void armarCabecera (){
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Año");
        jtInscripcion.setModel(modelo);
    }

    
    private void armarCombo(){
        List alumnos = aData.listarAlumnos();
        for (Object alu: alumnos){
            Alumno alumno = (Alumno) alu;         
                                                // puedo crear una variable alumno para que vaya recorriendo a la par de que agregue items 
            jcSelecAl.addItem(alumno);   // debe de haber alguna forma para solo poner algunos campos 
        }
    }
    
        private void limpiarTabla(){
        for (int i = modelo.getRowCount(); i > 0 ; i--) {
            modelo.removeRow(i-1);
        }
    }
    private void cargarDatos(Alumno alumno) {
       limpiarTabla();
        InscripcionData inscripcion = new InscripcionData();

        Object  alumnoObjeto =jcSelecAl.getSelectedItem();
       Alumno  alumnoDatos = (Alumno) alumnoObjeto;
            
       
        if (jrMateria.isSelected() == true && jrMateriaN.isSelected() == false) { //materias inscriptas 
            jbAnular.setEnabled(true);
            jbInscripcion.setEnabled(false);
           
            
            
            List <Materia>  listMat =inscripcion.obtenerMateriasCursadas(alumnoDatos.getIdAlumno());
            for (Materia mat : listMat) {       
                System.out.println(mat);
            
   
                modelo.addRow(new Object[]{mat.getIdMateria(),mat.getNombre(),mat.getAnio()});    
            }
 
            
        
        } else if (jrMateriaN.isSelected() == true && jrMateria.isSelected() == false) { //materias no inscriptas
            jbAnular.setEnabled(false);
            jbInscripcion.setEnabled(true);
           
            List <Materia>  listMatNoI =inscripcion.obtenerMateriasNoCursadas(alumnoDatos.getIdAlumno());
            for (Materia mat : listMatNoI) {       
                System.out.println(mat);
            
   
                modelo.addRow(new Object[]{mat.getIdMateria(),mat.getNombre(),mat.getAnio()});    
                
            }


        } else {
            jbAnular.setEnabled(false);
            jbInscripcion.setEnabled(false);
            modelo.setRowCount(0);
        }




    }
}
